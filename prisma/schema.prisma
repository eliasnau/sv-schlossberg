datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  createdAt     DateTime  @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id       String   @id @default(cuid())
  email    String
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
}


model Sport {
  id             String          @id @default(cuid())
  name           String
  description    String?
  trainingTimes  TrainingTime[]   
  trainingPlans  TrainingPlan[]   
  persons        Person[]         
}

model TrainingTime {
  id             String          @id @default(cuid())
  day            String
  startTime      String
  endTime        String
  sport          Sport            @relation(fields: [sportId], references: [id])
  sportId        String
  trainingPlan   TrainingPlan?    @relation(fields: [trainingPlanId], references: [id]) 
  trainingPlanId String?
}

model TrainingPlan {
  id             String          @id @default(cuid())
  day            String
  sport          Sport            @relation(fields: [sportId], references: [id])
  sportId        String
  trainingTimes  TrainingTime[]
}

model Person {
  id             String          @id @default(cuid())
  name           String
  image          String?
  sport          Sport            @relation(fields: [sportId], references: [id])
  sportId        String
}